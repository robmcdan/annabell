#include "BestExploitCommand.h"

BestExploitCommand::BestExploitCommand() :
		Command() {
}

int BestExploitCommand::doExecute() {
	if (input_token.size() < 3) {
		Display->Warning("n. of iterations and a phrase should be provided");
		Display->Warning("as argument in the current version.");
		return 1;
	}
	int n_iter;
	if (input_token.size() == 1)
		n_iter = 20; // will never be exec in curr. vers.
	else {
		stringstream ss1(input_token[1]);
		ss1 >> n_iter;
		if (!ss1) {
			Display->Warning("Cannot convert token to integer.");
		}
	}
	if (input_token.size() > 2) { // would not be necessary in curr. vers.
		string target_phrase;
		target_phrase = input_token[2];
		for (unsigned int itk = 3; itk < input_token.size(); itk++) {
			target_phrase = target_phrase + " " + input_token[itk];
		}
		ExecuteAct(annabell, Mon, STORE_ST_A, NULL_ACT, FLUSH_OUT);
		GetInputPhrase(annabell, Mon, target_phrase);
	}
	annabell->RemPhfWG->OrderedWnnFlag = false;
	//VerboseFlag = true;
	//BestExploitation(annabell, Mon, n_iter, target_phrase);
	//BestExploitation2(annabell, Mon, n_iter, target_phrase);
	//string out_phrase=ExploitationTest(annabell, Mon, n_iter);
	annabell->flags->OutPhrase = Exploitation(annabell, Mon, Display, n_iter);
	annabell->flags->CompleteOutputFlag = true;
	//VerboseFlag = false;
	annabell->RemPhfWG->OrderedWnnFlag = true;
	// check if the output is a sensorymotor command
	CheckSensoryMotor(annabell->flags->OutPhrase, annabell, Display);

	return 0;

}
